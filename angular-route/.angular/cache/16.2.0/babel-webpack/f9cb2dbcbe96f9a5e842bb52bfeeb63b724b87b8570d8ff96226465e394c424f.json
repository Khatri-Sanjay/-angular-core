{"ast":null,"code":"var _class;\nimport { inject } from '@angular/core';\nimport { Router } from \"@angular/router\";\nimport { AuthService } from \"./auth.service\";\nimport * as i0 from \"@angular/core\";\nexport class AuthGuardService {\n  constructor() {\n    this.authService = inject(AuthService);\n    this.router = inject(Router);\n  }\n  canActivate(route, state) {\n    if (this.authService.IsAuthenticate()) {\n      return true;\n    } else {\n      this.router.navigate(['/Login']);\n      return false;\n    }\n  }\n  canActivateChild(childRoute, state) {\n    return this.canActivate(childRoute, state);\n  }\n  canDeactivate(component, currentRoute, currentState, nextState) {\n    return component.canExit();\n  }\n}\n_class = AuthGuardService;\n_class.ɵfac = function AuthGuardService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["inject","Router","AuthService","AuthGuardService","constructor","authService","router","canActivate","route","state","IsAuthenticate","navigate","canActivateChild","childRoute","canDeactivate","component","currentRoute","currentState","nextState","canExit","factory","ɵfac","providedIn"],"sources":["D:\\angular practise\\Practise\\angular-route\\src\\app\\Services\\auth-guard.service.ts"],"sourcesContent":["import {inject, Injectable} from '@angular/core';\nimport {\n    ActivatedRouteSnapshot,\n    CanActivate,\n    CanActivateChild, CanDeactivate,\n    Router,\n    RouterStateSnapshot,\n    UrlTree\n} from \"@angular/router\";\nimport {Observable} from \"rxjs\";\nimport {AuthService} from \"./auth.service\";\nimport {ContactComponent} from \"../contact/contact.component\";\n\nexport interface IDeactivateComponent {\n  canExit: () => Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthGuardService implements CanActivate, CanActivateChild, CanDeactivate<ContactComponent> {\n\n    authService: AuthService = inject(AuthService);\n    router: Router = inject(Router);\n\n    constructor() {\n    }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):\n        Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n        if (this.authService.IsAuthenticate()) {\n            return true;\n        } else {\n            this.router.navigate(['/Login']);\n            return false;\n        }\n    }\n\n    canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot):\n        Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n        return this.canActivate(childRoute, state);\n    }\n\n    canDeactivate(\n        component: IDeactivateComponent, currentRoute: ActivatedRouteSnapshot, currentState: RouterStateSnapshot, nextState: RouterStateSnapshot\n    ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n        return component.canExit();\n    }\n\n}\n"],"mappings":";AAAA,SAAQA,MAAM,QAAmB,eAAe;AAChD,SAIIC,MAAM,QAGH,iBAAiB;AAExB,SAAQC,WAAW,QAAO,gBAAgB;;AAU1C,OAAM,MAAOC,gBAAgB;EAKzBC,YAAA;IAHA,KAAAC,WAAW,GAAgBL,MAAM,CAACE,WAAW,CAAC;IAC9C,KAAAI,MAAM,GAAWN,MAAM,CAACC,MAAM,CAAC;EAG/B;EAEAM,WAAWA,CAACC,KAA6B,EAAEC,KAA0B;IAEjE,IAAI,IAAI,CAACJ,WAAW,CAACK,cAAc,EAAE,EAAE;MACnC,OAAO,IAAI;KACd,MAAM;MACH,IAAI,CAACJ,MAAM,CAACK,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;;EAEpB;EAEAC,gBAAgBA,CAACC,UAAkC,EAAEJ,KAA0B;IAE3E,OAAO,IAAI,CAACF,WAAW,CAACM,UAAU,EAAEJ,KAAK,CAAC;EAC9C;EAEAK,aAAaA,CACTC,SAA+B,EAAEC,YAAoC,EAAEC,YAAiC,EAAEC,SAA8B;IAExI,OAAOH,SAAS,CAACI,OAAO,EAAE;EAC9B;;SA3BShB,gBAAgB;;mBAAhBA,MAAgB;AAAA;;SAAhBA,MAAgB;EAAAiB,OAAA,EAAhBjB,MAAgB,CAAAkB,IAAA;EAAAC,UAAA,EAFb;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}