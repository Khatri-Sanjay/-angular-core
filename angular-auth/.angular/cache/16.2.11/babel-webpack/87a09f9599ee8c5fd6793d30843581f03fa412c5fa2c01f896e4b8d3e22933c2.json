{"ast":null,"code":"import { Router } from \"@angular/router\";\nimport { inject } from \"@angular/core\";\nimport { AuthService } from \"../Services/auth.service\";\nimport { map, take } from \"rxjs/operators\";\nexport const canActivate = (router, state) => {\n  const authService = inject(AuthService);\n  const route = inject(Router);\n  return authService.user.pipe(take(1), map(user => {\n    const loggedIn = user ? true : false;\n    if (loggedIn) {\n      return true;\n    } else {\n      return route.createUrlTree(['/login']);\n    }\n  }));\n};","map":{"version":3,"names":["Router","inject","AuthService","map","take","canActivate","router","state","authService","route","user","pipe","loggedIn","createUrlTree"],"sources":["D:\\angular practise\\Practise\\angular-auth\\src\\app\\route-guards\\auth-guard.ts"],"sourcesContent":["import {ActivatedRouteSnapshot, Router, RouterStateSnapshot, UrlTree} from \"@angular/router\";\r\nimport {inject} from \"@angular/core\";\r\nimport {AuthService} from \"../Services/auth.service\";\r\nimport {map, take} from \"rxjs/operators\";\r\nimport {Observable} from \"rxjs\";\r\n\r\nexport const canActivate = (\r\n    router: ActivatedRouteSnapshot, state: RouterStateSnapshot\r\n): boolean | UrlTree | Promise<boolean> | Observable<boolean | UrlTree> => {\r\n    const authService = inject(AuthService);\r\n    const route = inject(Router);\r\n\r\n    return authService.user.pipe(take(1),map((user) => {\r\n        const loggedIn = user ? true : false;\r\n\r\n        if (loggedIn) {\r\n            return true;\r\n        } else {\r\n            return route.createUrlTree(['/login']);\r\n        }\r\n    }));\r\n}\r\n"],"mappings":"AAAA,SAAgCA,MAAM,QAAqC,iBAAiB;AAC5F,SAAQC,MAAM,QAAO,eAAe;AACpC,SAAQC,WAAW,QAAO,0BAA0B;AACpD,SAAQC,GAAG,EAAEC,IAAI,QAAO,gBAAgB;AAGxC,OAAO,MAAMC,WAAW,GAAGA,CACvBC,MAA8B,EAAEC,KAA0B,KACY;EACtE,MAAMC,WAAW,GAAGP,MAAM,CAACC,WAAW,CAAC;EACvC,MAAMO,KAAK,GAAGR,MAAM,CAACD,MAAM,CAAC;EAE5B,OAAOQ,WAAW,CAACE,IAAI,CAACC,IAAI,CAACP,IAAI,CAAC,CAAC,CAAC,EAACD,GAAG,CAAEO,IAAI,IAAI;IAC9C,MAAME,QAAQ,GAAGF,IAAI,GAAG,IAAI,GAAG,KAAK;IAEpC,IAAIE,QAAQ,EAAE;MACV,OAAO,IAAI;KACd,MAAM;MACH,OAAOH,KAAK,CAACI,aAAa,CAAC,CAAC,QAAQ,CAAC,CAAC;;EAE9C,CAAC,CAAC,CAAC;AACP,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}