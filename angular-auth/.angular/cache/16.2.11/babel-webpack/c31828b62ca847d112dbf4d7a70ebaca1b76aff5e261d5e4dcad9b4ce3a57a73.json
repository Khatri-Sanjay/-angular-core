{"ast":null,"code":"import { inject } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { Environment } from \"../../environment/environment\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport { BehaviorSubject, throwError } from \"rxjs\";\nimport { User } from \"../Model/user\";\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.http = inject(HttpClient);\n    this.user = new BehaviorSubject(null);\n  }\n  static #_ = this.SIGN_UP = Environment.SIGN_UP_API;\n  static #_2 = this.SIGN_IN = Environment.SIGN_IN_API;\n  getSignUP() {\n    return AuthService.SIGN_UP;\n  }\n  getSignIn() {\n    return AuthService.SIGN_IN;\n  }\n  signUp(email, password) {\n    let headers = new HttpHeaders();\n    headers = headers.set('content-type', 'application/json');\n    const data = {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    };\n    return this.http.post(this.getSignUP() + Environment.API_KEY, data, {\n      headers: headers\n    }).pipe(catchError(err => {\n      console.log('err message::', err);\n      let errorMessage = 'An unknown error occurred';\n      if (!err.error || !err.error.error) {\n        return throwError(() => errorMessage);\n      }\n      switch (err?.error?.error?.message) {\n        case 'EMAIL_EXISTS':\n          errorMessage = 'Email already Exist';\n          break;\n        case 'OPERATION_NOT_ALLOWED':\n          errorMessage = 'This operation cannot perform';\n          break;\n        case 'TOO_MANY_ATTEMPTS_TRY_LATER':\n          errorMessage = 'Too many attempts try later';\n          break;\n      }\n      return throwError(() => errorMessage);\n    }), tap(res => {\n      const expiresInTs = new Date().getTime() + +res.expiresIn * 1000;\n      const expiresIn = new Date(expiresInTs);\n      const user = new User(res.email, res.localId, res.idToken, expiresIn);\n      this.user.next(user);\n      localStorage.setItem('user', JSON.stringify(user));\n    }));\n  }\n  logIn(email, password) {\n    let headers = new HttpHeaders();\n    headers = headers.set('content-type', 'application/json');\n    const data = {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    };\n    return this.http.post(this.getSignIn() + Environment.API_KEY, data, {\n      headers: headers\n    }).pipe(catchError(err => {\n      console.log('err message::', err);\n      let errorMessage = 'An unknown error occurred';\n      if (!err.error || !err.error.error) {\n        return throwError(() => errorMessage);\n      }\n      switch (err?.error?.error?.message) {\n        case 'EMAIL_NOT_FOUND':\n          errorMessage = 'Email not found';\n          break;\n        case 'INVALID_PASSWORD':\n          errorMessage = 'Invalid Password';\n          break;\n        case 'USER_DISABLED':\n          errorMessage = 'User is disable';\n          break;\n      }\n      return throwError(() => errorMessage);\n    }), tap(res => {\n      const expiresInTs = new Date().getTime() + +res.expiresIn * 1000;\n      const expiresIn = new Date(expiresInTs);\n      const user = new User(res.email, res.localId, res.idToken, expiresIn);\n      this.user.next(user);\n      localStorage.setItem('user', JSON.stringify(user));\n    }));\n  }\n  logOut() {\n    this.user.next(null);\n  }\n  autoLogin() {\n    const user = JSON.parse(localStorage.getItem('user'));\n    if (!user) {\n      return;\n    }\n    const loggedUser = new User(user.email, user.id, user._token, user._expiresIn);\n    if (loggedUser.token) {\n      this.user.next(loggedUser);\n    }\n  }\n  static #_3 = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_4 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["inject","HttpClient","HttpHeaders","Environment","catchError","tap","BehaviorSubject","throwError","User","AuthService","constructor","http","user","_","SIGN_UP","SIGN_UP_API","_2","SIGN_IN","SIGN_IN_API","getSignUP","getSignIn","signUp","email","password","headers","set","data","returnSecureToken","post","API_KEY","pipe","err","console","log","errorMessage","error","message","res","expiresInTs","Date","getTime","expiresIn","localId","idToken","next","localStorage","setItem","JSON","stringify","logIn","logOut","autoLogin","parse","getItem","loggedUser","id","_token","_expiresIn","token","_3","_4","factory","ɵfac","providedIn"],"sources":["D:\\angular practise\\Practise\\angular-auth\\src\\app\\Services\\auth.service.ts"],"sourcesContent":["import {inject, Injectable} from \"@angular/core\";\r\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\r\nimport {AuthResponse} from \"../Model/auth-response\";\r\nimport {Environment} from \"../../environment/environment\";\r\nimport {LoggingService} from \"./logging.Service\";\r\nimport {catchError, tap} from \"rxjs/operators\";\r\nimport {BehaviorSubject, Subject, throwError} from \"rxjs\";\r\nimport {User} from \"../Model/user\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n    static SIGN_UP = Environment.SIGN_UP_API;\r\n    static SIGN_IN = Environment.SIGN_IN_API;\r\n\r\n    http: HttpClient = inject(HttpClient);\r\n\r\n    user = new BehaviorSubject<User>(null);\r\n\r\n    protected getSignUP() {\r\n        return AuthService.SIGN_UP;\r\n    }\r\n\r\n    protected getSignIn() {\r\n        return AuthService.SIGN_IN;\r\n    }\r\n\r\n    signUp(email: any, password: any) {\r\n        let headers = new HttpHeaders();\r\n        headers = headers.set('content-type', 'application/json');\r\n        const data = {email: email, password: password, returnSecureToken: true};\r\n        return this.http.post<AuthResponse>(\r\n            this.getSignUP() + Environment.API_KEY,\r\n            data,\r\n            {headers: headers}\r\n        ).pipe(catchError(err => {\r\n            console.log('err message::', err);\r\n            let errorMessage = 'An unknown error occurred';\r\n            if (!err.error || !err.error.error) {\r\n                return throwError(() => errorMessage);\r\n            }\r\n\r\n            switch (err?.error?.error?.message) {\r\n                case 'EMAIL_EXISTS':\r\n                    errorMessage = 'Email already Exist';\r\n                    break;\r\n                case 'OPERATION_NOT_ALLOWED':\r\n                    errorMessage = 'This operation cannot perform';\r\n                    break;\r\n                case 'TOO_MANY_ATTEMPTS_TRY_LATER':\r\n                    errorMessage = 'Too many attempts try later';\r\n                    break;\r\n            }\r\n            return throwError(() => errorMessage);\r\n        }), tap( (res) => {\r\n            const expiresInTs = new Date().getTime() + +res.expiresIn * 1000;\r\n            const expiresIn = new Date(expiresInTs);\r\n            const user = new User(res.email, res.localId, res.idToken, expiresIn);\r\n            this.user.next(user);\r\n            localStorage.setItem('user', JSON.stringify(user));\r\n        }));\r\n    }\r\n\r\n    logIn(email: string, password: string) {\r\n        let headers = new HttpHeaders();\r\n        headers = headers.set('content-type', 'application/json');\r\n        const data = {email: email, password: password, returnSecureToken: true};\r\n        return this.http.post<AuthResponse>(\r\n            this.getSignIn() + Environment.API_KEY,\r\n            data,\r\n            {headers: headers}\r\n        ).pipe(catchError(err => {\r\n            console.log('err message::', err);\r\n            let errorMessage = 'An unknown error occurred';\r\n            if (!err.error || !err.error.error) {\r\n                return throwError(() => errorMessage);\r\n            }\r\n\r\n            switch (err?.error?.error?.message) {\r\n                case 'EMAIL_NOT_FOUND':\r\n                    errorMessage = 'Email not found';\r\n                    break;\r\n                case 'INVALID_PASSWORD':\r\n                    errorMessage = 'Invalid Password';\r\n                    break;\r\n                case 'USER_DISABLED':\r\n                    errorMessage = 'User is disable';\r\n                    break;\r\n            }\r\n            return throwError(() => errorMessage);\r\n        }), tap( (res) => {\r\n            const expiresInTs = new Date().getTime() + +res.expiresIn * 1000;\r\n            const expiresIn = new Date(expiresInTs);\r\n            const user = new User(res.email, res.localId, res.idToken, expiresIn);\r\n            this.user.next(user);\r\n            localStorage.setItem('user', JSON.stringify(user));\r\n        }));\r\n    }\r\n\r\n    logOut() {\r\n        this.user.next(null);\r\n    }\r\n\r\n    autoLogin() {\r\n        const user = JSON.parse(localStorage.getItem('user'));\r\n        if (!user) {\r\n            return;\r\n        }\r\n\r\n        const loggedUser = new User(user.email, user.id, user._token, user._expiresIn);\r\n\r\n        if (loggedUser.token) {\r\n            this.user.next(loggedUser);\r\n        }\r\n\r\n    }\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}