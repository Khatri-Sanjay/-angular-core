{"ast":null,"code":"import { inject } from \"@angular/core\";\nimport { HttpClient, HttpHeaders, HttpParams, HttpEventType } from '@angular/common/http';\nimport { map, catchError, tap } from 'rxjs/operators';\nimport { Subject, throwError } from 'rxjs';\nimport { LoggingService } from \"./logging.Service\";\nimport { AuthService } from \"./auth.service\";\nimport { environment } from \"src/environments/environment.development\";\nimport * as i0 from \"@angular/core\";\nexport class TaskService {\n  constructor() {\n    this.http = inject(HttpClient);\n    this.loggingService = inject(LoggingService);\n    this.authService = inject(AuthService);\n    this.errorSubject = new Subject();\n  }\n  static #_ = this.API = environment.baseUrl;\n  getApi() {\n    return TaskService.API;\n  }\n  CreateTask(task) {\n    const headers = new HttpHeaders({\n      'my-header': 'hello-world'\n    });\n    this.http.post(this.getApi() + '/tasks.json', task, {\n      headers: headers\n    }).pipe(catchError(err => {\n      //Write the logic to log errors\n      const errorObj = {\n        statusCode: err.status,\n        errorMessage: err.message,\n        datetime: new Date()\n      };\n      this.loggingService.logError(errorObj);\n      return throwError(() => err);\n    })).subscribe({\n      error: err => {\n        this.errorSubject.next(err);\n      }\n    });\n  }\n  DeleteTask(id) {\n    this.http.delete(this.getApi() + '/tasks/' + id + '.json').pipe(catchError(err => {\n      //Write the logic to log errors\n      const errorObj = {\n        statusCode: err.status,\n        errorMessage: err.message,\n        datetime: new Date()\n      };\n      this.loggingService.logError(errorObj);\n      return throwError(() => err);\n    })).subscribe({\n      error: err => {\n        this.errorSubject.next(err);\n      }\n    });\n  }\n  DeleteAllTasks() {\n    this.http.delete(this.getApi() + '/tasks.json', {\n      observe: 'events',\n      responseType: 'json'\n    }).pipe(tap(event => {\n      console.log(event);\n      if (event.type === HttpEventType.Sent) {}\n    }), catchError(err => {\n      //Write the logic to log errors\n      const errorObj = {\n        statusCode: err.status,\n        errorMessage: err.message,\n        datetime: new Date()\n      };\n      this.loggingService.logError(errorObj);\n      return throwError(() => err);\n    })).subscribe({\n      error: err => {\n        this.errorSubject.next(err);\n      }\n    });\n  }\n  GetAllTasks() {\n    let headers = new HttpHeaders();\n    headers = headers.append('content-type', 'application/json');\n    headers = headers.append('content-type', 'text/html');\n    let queryParams = new HttpParams();\n    queryParams = queryParams.set('page', 2);\n    queryParams = queryParams.set('item', 10);\n    return this.http.get(this.getApi() + '/tasks.json', {\n      headers: headers,\n      params: queryParams,\n      observe: 'body'\n    }).pipe(map(response => {\n      //TRANSFORM DATA\n      let tasks = [];\n      console.log(response);\n      for (let key in response) {\n        if (response.hasOwnProperty(key)) {\n          tasks.push({\n            ...response[key],\n            id: key\n          });\n        }\n      }\n      return tasks;\n    }), catchError(err => {\n      //Write the logic to log errors\n      const errorObj = {\n        statusCode: err.status,\n        errorMessage: err.message,\n        datetime: new Date()\n      };\n      this.loggingService.logError(errorObj);\n      return throwError(() => err);\n    }));\n  }\n  UpdateTask(id, data) {\n    this.http.put(this.getApi() + '/tasks/' + id + '.json', data).pipe(catchError(err => {\n      //Write the logic to log errors\n      const errorObj = {\n        statusCode: err.status,\n        errorMessage: err.message,\n        datetime: new Date()\n      };\n      this.loggingService.logError(errorObj);\n      return throwError(() => err);\n    })).subscribe({\n      error: err => {\n        this.errorSubject.next(err);\n      }\n    });\n  }\n  getTaskDetails(id) {\n    return this.http.get(this.getApi() + '/tasks/' + id + '.json').pipe(map(response => {\n      console.log(response);\n      let task = {};\n      task = {\n        ...response,\n        id: id\n      };\n      return task;\n    }));\n  }\n  static #_2 = this.ɵfac = function TaskService_Factory(t) {\n    return new (t || TaskService)();\n  };\n  static #_3 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TaskService,\n    factory: TaskService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["inject","HttpClient","HttpHeaders","HttpParams","HttpEventType","map","catchError","tap","Subject","throwError","LoggingService","AuthService","environment","TaskService","constructor","http","loggingService","authService","errorSubject","_","API","baseUrl","getApi","CreateTask","task","headers","post","pipe","err","errorObj","statusCode","status","errorMessage","message","datetime","Date","logError","subscribe","error","next","DeleteTask","id","delete","DeleteAllTasks","observe","responseType","event","console","log","type","Sent","GetAllTasks","append","queryParams","set","get","params","response","tasks","key","hasOwnProperty","push","UpdateTask","data","put","getTaskDetails","_2","_3","factory","ɵfac","providedIn"],"sources":["D:\\angular practise\\Practise\\angular-auth\\src\\app\\Services\\task.service.ts"],"sourcesContent":["import { Injectable, inject } from \"@angular/core\";\r\nimport { HttpClient, HttpHeaders, HttpErrorResponse, HttpParams, HttpEventType } from '@angular/common/http';\r\nimport { Task } from \"../Model/Task\";\r\nimport { map, catchError, tap } from 'rxjs/operators';\r\nimport { Subject, throwError } from 'rxjs';\r\nimport { LoggingService } from \"./logging.Service\";\r\nimport {AuthService} from \"./auth.service\";\r\nimport { environment } from \"src/environments/environment.development\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TaskService{\r\n\r\n    static API = environment.baseUrl;\r\n\r\n    protected getApi() {\r\n        return TaskService.API;\r\n    }\r\n\r\n    http: HttpClient = inject(HttpClient);\r\n    loggingService: LoggingService = inject(LoggingService);\r\n    authService: AuthService = inject(AuthService);\r\n    errorSubject = new Subject<HttpErrorResponse>();\r\n\r\n    CreateTask(task: Task){\r\n        const headers = new HttpHeaders({'my-header': 'hello-world'})\r\n        this.http.post<{name: string}>(\r\n            this.getApi() + '/tasks.json',\r\n            task, {headers: headers}\r\n            )\r\n            .pipe(catchError((err) => {\r\n                //Write the logic to log errors\r\n                const errorObj = {statusCode: err.status, errorMessage: err.message, datetime: new Date()}\r\n                this.loggingService.logError(errorObj);\r\n                return throwError(() => err);\r\n            }))\r\n            .subscribe({error: (err) => {\r\n                this.errorSubject.next(err);\r\n            }});\r\n    }\r\n\r\n    DeleteTask(id: string | undefined){\r\n        this.http.delete(this.getApi() + '/tasks/' +id+'.json')\r\n        .pipe(catchError((err) => {\r\n            //Write the logic to log errors\r\n            const errorObj = {statusCode: err.status, errorMessage: err.message, datetime: new Date()}\r\n            this.loggingService.logError(errorObj);\r\n            return throwError(() => err);\r\n        }))\r\n        .subscribe({error: (err) => {\r\n            this.errorSubject.next(err);\r\n        }});\r\n    }\r\n\r\n    DeleteAllTasks(){\r\n        this.http.delete(this.getApi() + '/tasks.json', {observe: 'events', responseType: 'json'})\r\n        .pipe(tap((event) => {\r\n            console.log(event);\r\n            if(event.type === HttpEventType.Sent){\r\n\r\n            }\r\n        }), catchError((err) => {\r\n            //Write the logic to log errors\r\n            const errorObj = {statusCode: err.status, errorMessage: err.message, datetime: new Date()}\r\n            this.loggingService.logError(errorObj);\r\n            return throwError(() => err);\r\n        }))\r\n        .subscribe({error: (err) => {\r\n            this.errorSubject.next(err);\r\n        }})\r\n    }\r\n\r\n    GetAllTasks(){\r\n        let headers = new HttpHeaders();\r\n        headers = headers.append('content-type', 'application/json');\r\n        headers = headers.append('content-type', 'text/html')\r\n\r\n        let queryParams = new HttpParams();\r\n        queryParams = queryParams.set('page', 2);\r\n        queryParams = queryParams.set('item', 10)\r\n\r\n        return this.http.get<{[key: string]: Task}>(\r\n            this.getApi() + '/tasks.json'\r\n            ,{headers: headers, params: queryParams, observe: 'body'}\r\n            ).pipe(map((response) => {\r\n                 //TRANSFORM DATA\r\n                 let tasks = [];\r\n                 console.log(response);\r\n                 for(let key in response){\r\n                   if(response.hasOwnProperty(key)){\r\n                     tasks.push({...response[key], id: key});\r\n                   }\r\n                 }\r\n\r\n                 return tasks;\r\n            }), catchError((err) => {\r\n                //Write the logic to log errors\r\n                const errorObj = {statusCode: err.status, errorMessage: err.message, datetime: new Date()}\r\n                this.loggingService.logError(errorObj);\r\n                return throwError(() => err);\r\n            }))\r\n    }\r\n\r\n    UpdateTask(id: string | undefined, data: Task){\r\n        this.http.put(this.getApi() + '/tasks/'+id+'.json', data)\r\n        .pipe(catchError((err) => {\r\n            //Write the logic to log errors\r\n            const errorObj = {statusCode: err.status, errorMessage: err.message, datetime: new Date()}\r\n            this.loggingService.logError(errorObj);\r\n            return throwError(() => err);\r\n        }))\r\n        .subscribe({error: (err) => {\r\n            this.errorSubject.next(err);\r\n        }});\r\n    }\r\n\r\n    getTaskDetails(id: string | undefined){\r\n        return this.http.get(this.getApi() + '/tasks/'+id+'.json')\r\n        .pipe(map((response) => {\r\n            console.log(response)\r\n            let task = {};\r\n            task = {...response, id: id}\r\n            return task;\r\n        }))\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}