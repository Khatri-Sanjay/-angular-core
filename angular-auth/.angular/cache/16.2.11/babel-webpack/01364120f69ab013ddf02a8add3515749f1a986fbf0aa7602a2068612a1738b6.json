{"ast":null,"code":"import { inject } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { Environment } from \"../../environment/environment\";\nimport { catchError } from \"rxjs/operators\";\nimport { throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.http = inject(HttpClient);\n  }\n  static #_ = this.SIGN_UP = Environment.SIGN_UP_API;\n  static #_2 = this.SIGN_IN = Environment.SIGN_IN_API;\n  getSignUP() {\n    return AuthService.SIGN_UP;\n  }\n  getSignIn() {\n    return AuthService.SIGN_IN;\n  }\n  signUp(email, password) {\n    let headers = new HttpHeaders();\n    headers = headers.set('content-type', 'application/json');\n    const data = {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    };\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyDIFu1bx0zeKoQluUS0cSkjRQvqflS51W8', data, {\n      headers: headers\n    }).pipe(catchError(err => {\n      console.log('err message::', err);\n      let errorMessage = 'An unknown error occurred';\n      if (!err.error || !err.error.error) {\n        return throwError(() => errorMessage);\n      }\n      switch (err?.error?.error?.message) {\n        case 'EMAIL_EXIST':\n          errorMessage = 'Email already Exist';\n          break;\n        case 'OPERATION_NOT_ALLOWED':\n          errorMessage = 'This operation cannot perform';\n          break;\n        case 'TOO_MANY_ATTEMPTS_TRY_LATER':\n          errorMessage = 'Too many attempts try later';\n          break;\n      }\n      return throwError(() => errorMessage);\n    }));\n  }\n  static #_3 = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_4 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["inject","HttpClient","HttpHeaders","Environment","catchError","throwError","AuthService","constructor","http","_","SIGN_UP","SIGN_UP_API","_2","SIGN_IN","SIGN_IN_API","getSignUP","getSignIn","signUp","email","password","headers","set","data","returnSecureToken","post","pipe","err","console","log","errorMessage","error","message","_3","_4","factory","ɵfac","providedIn"],"sources":["D:\\angular practise\\Practise\\angular-auth\\src\\app\\Services\\auth.service.ts"],"sourcesContent":["import {inject, Injectable} from \"@angular/core\";\r\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\r\nimport {AuthResponse} from \"../Model/auth-response\";\r\nimport {Environment} from \"../../environment/environment\";\r\nimport {LoggingService} from \"./logging.Service\";\r\nimport {catchError} from \"rxjs/operators\";\r\nimport {throwError} from \"rxjs\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n    static SIGN_UP = Environment.SIGN_UP_API;\r\n    static SIGN_IN = Environment.SIGN_IN_API;\r\n\r\n    http: HttpClient = inject(HttpClient);\r\n\r\n    protected getSignUP() {\r\n        return AuthService.SIGN_UP;\r\n    }\r\n\r\n    protected getSignIn() {\r\n        return AuthService.SIGN_IN;\r\n    }\r\n\r\n    signUp(email: any, password: any) {\r\n        let headers = new HttpHeaders();\r\n        headers = headers.set('content-type', 'application/json');\r\n        const data = {email: email, password: password, returnSecureToken: true};\r\n        return this.http.post<AuthResponse>(\r\n            'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyDIFu1bx0zeKoQluUS0cSkjRQvqflS51W8',\r\n            data,\r\n            {headers: headers}\r\n        ).pipe(catchError(err => {\r\n            console.log('err message::', err);\r\n            let errorMessage = 'An unknown error occurred';\r\n            if (!err.error || !err.error.error) {\r\n                return throwError(() => errorMessage);\r\n            }\r\n\r\n            switch (err?.error?.error?.message) {\r\n                case 'EMAIL_EXIST':\r\n                    errorMessage = 'Email already Exist';\r\n                    break;\r\n                case 'OPERATION_NOT_ALLOWED':\r\n                    errorMessage = 'This operation cannot perform';\r\n                    break;\r\n                case 'TOO_MANY_ATTEMPTS_TRY_LATER':\r\n                    errorMessage = 'Too many attempts try later';\r\n                    break;\r\n            }\r\n            return throwError(() => errorMessage);\r\n        }))\r\n    }\r\n\r\n}\r\n"],"mappings":"AAAA,SAAQA,MAAM,QAAmB,eAAe;AAChD,SAAQC,UAAU,EAAEC,WAAW,QAAO,sBAAsB;AAE5D,SAAQC,WAAW,QAAO,+BAA+B;AAEzD,SAAQC,UAAU,QAAO,gBAAgB;AACzC,SAAQC,UAAU,QAAO,MAAM;;AAK/B,OAAM,MAAOC,WAAW;EAHxBC,YAAA;IAQI,KAAAC,IAAI,GAAeR,MAAM,CAACC,UAAU,CAAC;;EAwCxC,QAAAQ,CAAA,GA3CU,KAAAC,OAAO,GAAGP,WAAW,CAACQ,WAAW;EAAA,QAAAC,EAAA,GACjC,KAAAC,OAAO,GAAGV,WAAW,CAACW,WAAW;EAI9BC,SAASA,CAAA;IACf,OAAOT,WAAW,CAACI,OAAO;EAC9B;EAEUM,SAASA,CAAA;IACf,OAAOV,WAAW,CAACO,OAAO;EAC9B;EAEAI,MAAMA,CAACC,KAAU,EAAEC,QAAa;IAC5B,IAAIC,OAAO,GAAG,IAAIlB,WAAW,EAAE;IAC/BkB,OAAO,GAAGA,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;IACzD,MAAMC,IAAI,GAAG;MAACJ,KAAK,EAAEA,KAAK;MAAEC,QAAQ,EAAEA,QAAQ;MAAEI,iBAAiB,EAAE;IAAI,CAAC;IACxE,OAAO,IAAI,CAACf,IAAI,CAACgB,IAAI,CACjB,uGAAuG,EACvGF,IAAI,EACJ;MAACF,OAAO,EAAEA;IAAO,CAAC,CACrB,CAACK,IAAI,CAACrB,UAAU,CAACsB,GAAG,IAAG;MACpBC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,GAAG,CAAC;MACjC,IAAIG,YAAY,GAAG,2BAA2B;MAC9C,IAAI,CAACH,GAAG,CAACI,KAAK,IAAI,CAACJ,GAAG,CAACI,KAAK,CAACA,KAAK,EAAE;QAChC,OAAOzB,UAAU,CAAC,MAAMwB,YAAY,CAAC;;MAGzC,QAAQH,GAAG,EAAEI,KAAK,EAAEA,KAAK,EAAEC,OAAO;QAC9B,KAAK,aAAa;UACdF,YAAY,GAAG,qBAAqB;UACpC;QACJ,KAAK,uBAAuB;UACxBA,YAAY,GAAG,+BAA+B;UAC9C;QACJ,KAAK,6BAA6B;UAC9BA,YAAY,GAAG,6BAA6B;UAC5C;;MAER,OAAOxB,UAAU,CAAC,MAAMwB,YAAY,CAAC;IACzC,CAAC,CAAC,CAAC;EACP;EAAC,QAAAG,EAAA,G;qBA3CQ1B,WAAW;EAAA;EAAA,QAAA2B,EAAA,G;WAAX3B,WAAW;IAAA4B,OAAA,EAAX5B,WAAW,CAAA6B,IAAA;IAAAC,UAAA,EAFR;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}