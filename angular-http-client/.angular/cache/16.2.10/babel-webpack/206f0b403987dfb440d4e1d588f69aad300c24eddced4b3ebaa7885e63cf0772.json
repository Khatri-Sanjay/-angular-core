{"ast":null,"code":"import { HttpEventType } from \"@angular/common/http\";\nimport { tap } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nexport class AuthInterceptorService {\n  intercept(req, next) {\n    const modifiedRequest = req.clone({\n      headers: req.headers.append('auth', 'abcdef')\n    });\n    console.log('Auth interceptor called modifiedRequest', modifiedRequest);\n    console.log('Auth interceptor called', req);\n    return next.handle(modifiedRequest).pipe(tap(event => {\n      if (event.type === HttpEventType.Response) {\n        console.log('Response has arrived', event.body);\n      }\n    }));\n  }\n  static #_ = this.ɵfac = function AuthInterceptorService_Factory(t) {\n    return new (t || AuthInterceptorService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptorService,\n    factory: AuthInterceptorService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpEventType","tap","AuthInterceptorService","intercept","req","next","modifiedRequest","clone","headers","append","console","log","handle","pipe","event","type","Response","body","_","_2","factory","ɵfac","providedIn"],"sources":["D:\\angular practise\\Practise\\angular-http-client\\src\\app\\Service\\auth-interceptor.service.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {HttpEvent, HttpEventType, HttpHandler, HttpInterceptor, HttpRequest} from \"@angular/common/http\";\r\nimport {Observable, tap} from \"rxjs\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthInterceptorService implements HttpInterceptor{\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        const modifiedRequest = req.clone({headers: req.headers.append('auth', 'abcdef')});\r\n        console.log('Auth interceptor called modifiedRequest', modifiedRequest);\r\n        console.log('Auth interceptor called', req);\r\n        return next.handle(modifiedRequest).pipe(tap((event) => {\r\n            if (event.type === HttpEventType.Response) {\r\n                console.log('Response has arrived', event.body);\r\n            }\r\n        }));\r\n    }\r\n}\r\n"],"mappings":"AACA,SAAmBA,aAAa,QAAkD,sBAAsB;AACxG,SAAoBC,GAAG,QAAO,MAAM;;AAKpC,OAAM,MAAOC,sBAAsB;EAE/BC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAC9C,MAAMC,eAAe,GAAGF,GAAG,CAACG,KAAK,CAAC;MAACC,OAAO,EAAEJ,GAAG,CAACI,OAAO,CAACC,MAAM,CAAC,MAAM,EAAE,QAAQ;IAAC,CAAC,CAAC;IAClFC,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAEL,eAAe,CAAC;IACvEI,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEP,GAAG,CAAC;IAC3C,OAAOC,IAAI,CAACO,MAAM,CAACN,eAAe,CAAC,CAACO,IAAI,CAACZ,GAAG,CAAEa,KAAK,IAAI;MACnD,IAAIA,KAAK,CAACC,IAAI,KAAKf,aAAa,CAACgB,QAAQ,EAAE;QACvCN,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEG,KAAK,CAACG,IAAI,CAAC;;IAEvD,CAAC,CAAC,CAAC;EACP;EAAC,QAAAC,CAAA,G;qBAXQhB,sBAAsB;EAAA;EAAA,QAAAiB,EAAA,G;WAAtBjB,sBAAsB;IAAAkB,OAAA,EAAtBlB,sBAAsB,CAAAmB,IAAA;IAAAC,UAAA,EAFnB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}