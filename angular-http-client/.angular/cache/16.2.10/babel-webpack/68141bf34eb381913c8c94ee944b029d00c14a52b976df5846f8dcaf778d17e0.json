{"ast":null,"code":"import { inject } from '@angular/core';\nimport { HttpClient } from \"@angular/common/http\";\nimport { map } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nexport class TaskService {\n  static #_ = this.API = 'https://task-management-def88-default-rtdb.firebaseio.com/';\n  constructor() {\n    this.http = inject(HttpClient);\n  }\n  getApi() {\n    return TaskService.API;\n  }\n  createTask(data) {\n    this.http.post(this.getApi() + '/tasks.json', data, {\n      headers: {\n        'task-create': 'created'\n      }\n    }).subscribe({\n      next: res => {\n        console.log('Task created:', res);\n      },\n      error: err => {\n        console.error('Error occurred:', err);\n      }\n    });\n  }\n  fetchAllTask() {\n    return this.http.get(this.getApi() + '/tasks.json').pipe(map(response => {\n      // Transform data\n      let tasks = [];\n      for (let key in response) {\n        if (response.hasOwnProperty(key)) {\n          tasks.push({\n            ...response[key],\n            id: key\n          });\n        }\n      }\n      return tasks;\n    }));\n  }\n  deleteTaskById(id) {\n    this.http.delete(this.getApi() + '/tasks/' + id + '.json').subscribe({\n      next: res => {\n        console.log('Delete Successfully:', res);\n      },\n      error: err => {\n        console.error('Error occurred:', err);\n      }\n    });\n  }\n  deleteAllTask() {\n    this.http.delete(this.getApi() + '/tasks.json').subscribe({\n      next: res => {\n        console.log('Delete all task Successfully:', res);\n      },\n      error: err => {\n        console.error('Error occurred:', err);\n      }\n    });\n  }\n  updateTask(id, data) {\n    this.http.put(this.getApi() + '/tasks/' + id + '.json', data).subscribe({\n      next: value => {\n        console.log('update successfully', value);\n      },\n      error: err => {\n        console.log('unable to update data', err);\n      }\n    });\n  }\n  static #_2 = this.ɵfac = function TaskService_Factory(t) {\n    return new (t || TaskService)();\n  };\n  static #_3 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TaskService,\n    factory: TaskService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["inject","HttpClient","map","TaskService","_","API","constructor","http","getApi","createTask","data","post","headers","subscribe","next","res","console","log","error","err","fetchAllTask","get","pipe","response","tasks","key","hasOwnProperty","push","id","deleteTaskById","delete","deleteAllTask","updateTask","put","value","_2","_3","factory","ɵfac","providedIn"],"sources":["D:\\angular practise\\Practise\\angular-http-client\\src\\app\\Service\\task.service.ts"],"sourcesContent":["import {inject, Injectable} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {map, Observable} from \"rxjs\";\nimport {error} from \"@angular/compiler-cli/src/transformers/util\";\nimport {Task} from \"../Model/task\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TaskService {\n\n    static API = 'https://task-management-def88-default-rtdb.firebaseio.com/';\n\n    http = inject(HttpClient);\n\n\n    constructor() {\n    }\n\n\n    protected getApi(): string {\n        return TaskService.API;\n    }\n\n    createTask(data: Task) {\n        this.http.post<{ name: string }>(\n            this.getApi() + '/tasks.json',\n            data,\n            {headers: {'task-create': 'created'}}\n        ).subscribe({\n            next: (res) => {\n                console.log('Task created:', res);\n            },\n            error: (err: any) => {\n                console.error('Error occurred:', err);\n            }\n        });\n    }\n\n\n    fetchAllTask() {\n        return this.http.get<{ [key: string]: Task }>(this.getApi() + '/tasks.json')\n            .pipe(\n                map((response) => {\n                    // Transform data\n                    let tasks = [];\n                    for (let key in response) {\n                        if (response.hasOwnProperty(key)) {\n                            tasks.push({...response[key], id: key});\n                        }\n                    }\n                    return tasks;\n                })\n            );\n    }\n\n    deleteTaskById(id: string) {\n        this.http.delete(this.getApi() + '/tasks/' + id + '.json')\n            .subscribe({\n                next: (res) => {\n                    console.log('Delete Successfully:', res);\n                },\n                error: (err: any) => {\n                    console.error('Error occurred:', err);\n                }\n            });\n    }\n\n    deleteAllTask() {\n        this.http.delete(this.getApi() + '/tasks.json')\n            .subscribe({\n                next: (res) => {\n                    console.log('Delete all task Successfully:', res);\n                },\n                error: (err: any) => {\n                    console.error('Error occurred:', err);\n                }\n            });\n    }\n\n    updateTask(id: string, data: Task) {\n        this.http.put(this.getApi() + '/tasks/' + id + '.json', data)\n            .subscribe({\n                next: value => {\n                    console.log('update successfully', value);\n                },\n                error: err => {\n                    console.log('unable to update data', err);\n                }\n            });\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}