{"ast":null,"code":"import { inject } from '@angular/core';\nimport { HttpClient } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nexport class TaskService {\n  static #_ = this.API = 'https://task-management-def88-default-rtdb.firebaseio.com/';\n  constructor() {\n    this.http = inject(HttpClient);\n  }\n  getApi() {\n    return TaskService.API;\n  }\n  createTask(data) {\n    this.http.post(this.getApi() + '/tasks.json', data, {\n      headers: {\n        'task-create': 'created'\n      }\n    }).subscribe({\n      next: res => {\n        console.log('Task created:', res);\n      },\n      error: err => {\n        console.error('Error occurred:', err);\n      }\n    });\n  }\n  fetchAllTask() {\n    this.http.get(this.getApi() + '/tasks.json').subscribe({\n      next: res => {\n        console.log('Task Get:', res);\n        return res;\n      },\n      error: err => {\n        console.error('Error occurred:', err);\n      }\n    });\n  }\n  static #_2 = this.ɵfac = function TaskService_Factory(t) {\n    return new (t || TaskService)();\n  };\n  static #_3 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TaskService,\n    factory: TaskService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["inject","HttpClient","TaskService","_","API","constructor","http","getApi","createTask","data","post","headers","subscribe","next","res","console","log","error","err","fetchAllTask","get","_2","_3","factory","ɵfac","providedIn"],"sources":["D:\\angular practise\\Practise\\angular-http-client\\src\\app\\Service\\task.service.ts"],"sourcesContent":["import {inject, Injectable} from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {error} from \"@angular/compiler-cli/src/transformers/util\";\nimport {Task} from \"../Model/task\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TaskService {\n\n    static API = 'https://task-management-def88-default-rtdb.firebaseio.com/';\n\n    http = inject(HttpClient);\n\n\n    constructor() {\n    }\n\n\n    protected getApi(): string {\n        return TaskService.API;\n    }\n\n    createTask(data: Task) {\n        this.http.post<{ name: string }>(\n            this.getApi() + '/tasks.json',\n            data,\n            {headers: {'task-create': 'created'}}\n        ).subscribe({\n            next: (res) => {\n                console.log('Task created:', res);\n            },\n            error: (err: any) => {\n                console.error('Error occurred:', err);\n            }\n        });\n    }\n\n\n    fetchAllTask() {\n        this.http.get<{[key: string]: Task}>(this.getApi() + '/tasks.json').subscribe({\n        next: (res) => {\n          console.log('Task Get:', res);\n          return res;\n        },\n        error: (err: any) => {\n          console.error('Error occurred:', err);\n        }\n      });\n    }\n}\n"],"mappings":"AAAA,SAAQA,MAAM,QAAmB,eAAe;AAChD,SAAQC,UAAU,QAAO,sBAAsB;;AAQ/C,OAAM,MAAOC,WAAW;EAAA,QAAAC,CAAA,GAEb,KAAAC,GAAG,GAAG,4DAA4D;EAKzEC,YAAA;IAHA,KAAAC,IAAI,GAAGN,MAAM,CAACC,UAAU,CAAC;EAIzB;EAGUM,MAAMA,CAAA;IACZ,OAAOL,WAAW,CAACE,GAAG;EAC1B;EAEAI,UAAUA,CAACC,IAAU;IACjB,IAAI,CAACH,IAAI,CAACI,IAAI,CACV,IAAI,CAACH,MAAM,EAAE,GAAG,aAAa,EAC7BE,IAAI,EACJ;MAACE,OAAO,EAAE;QAAC,aAAa,EAAE;MAAS;IAAC,CAAC,CACxC,CAACC,SAAS,CAAC;MACRC,IAAI,EAAGC,GAAG,IAAI;QACVC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,GAAG,CAAC;MACrC,CAAC;MACDG,KAAK,EAAGC,GAAQ,IAAI;QAChBH,OAAO,CAACE,KAAK,CAAC,iBAAiB,EAAEC,GAAG,CAAC;MACzC;KACH,CAAC;EACN;EAGAC,YAAYA,CAAA;IACR,IAAI,CAACb,IAAI,CAACc,GAAG,CAAwB,IAAI,CAACb,MAAM,EAAE,GAAG,aAAa,CAAC,CAACK,SAAS,CAAC;MAC9EC,IAAI,EAAGC,GAAG,IAAI;QACZC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEF,GAAG,CAAC;QAC7B,OAAOA,GAAG;MACZ,CAAC;MACDG,KAAK,EAAGC,GAAQ,IAAI;QAClBH,OAAO,CAACE,KAAK,CAAC,iBAAiB,EAAEC,GAAG,CAAC;MACvC;KACD,CAAC;EACJ;EAAC,QAAAG,EAAA,G;qBAzCQnB,WAAW;EAAA;EAAA,QAAAoB,EAAA,G;WAAXpB,WAAW;IAAAqB,OAAA,EAAXrB,WAAW,CAAAsB,IAAA;IAAAC,UAAA,EAFR;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}