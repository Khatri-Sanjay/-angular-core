{"ast":null,"code":"import { inject } from '@angular/core';\nimport { HttpClient, HttpEventType, HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport { catchError, map, Subject, tap, throwError } from \"rxjs\";\nimport { LoggingService } from \"./logging.service\";\nimport * as i0 from \"@angular/core\";\nexport class TaskService {\n  static #_ = this.API = 'https://task-management-def88-default-rtdb.firebaseio.com/';\n  constructor() {\n    this.http = inject(HttpClient);\n    this.loggingService = inject(LoggingService);\n    this.errorSubject = new Subject();\n  }\n  getApi() {\n    return TaskService.API;\n  }\n  createTask(data) {\n    this.http.post(this.getApi() + '/tasks.json', data, {\n      headers: {\n        'task-create': 'created'\n      }\n    }).pipe(catchError(error => {\n      const errObject = {\n        statusCode: error.status,\n        errorMessage: error.message,\n        dateTime: new Date()\n      };\n      this.loggingService.logError(errObject);\n      return throwError(() => error);\n    })).subscribe({\n      next: res => {\n        console.log('Task created:', res);\n      },\n      error: err => {\n        console.error('Error occurred:', err);\n        this.errorSubject.next(err);\n      }\n    });\n  }\n  fetchAllTask() {\n    let headers = new HttpHeaders();\n    headers = headers.set('content-type', 'application/json');\n    headers = headers.set('content-type', 'text/html');\n    headers = headers.set('Access-Control-Allow-Origin', '*');\n    let queryParams = new HttpParams();\n    queryParams = queryParams.set('page', 2);\n    queryParams = queryParams.set('items', 20);\n    return this.http.get(this.getApi() + '/tasks.json', {\n      headers: headers,\n      params: queryParams,\n      observe: 'body'\n    }).pipe(map(response => {\n      console.log(response);\n      // Transform data\n      let tasks = [];\n      for (let key in response) {\n        if (response.hasOwnProperty(key)) {\n          tasks.push({\n            ...response[key],\n            id: key\n          });\n        }\n      }\n      return tasks;\n    }), catchError(error => {\n      const errObject = {\n        statusCode: error.status,\n        errorMessage: error.message,\n        dateTime: new Date()\n      };\n      this.loggingService.logError(errObject);\n      return throwError(() => error);\n    }));\n  }\n  deleteTaskById(id) {\n    this.http.delete(this.getApi() + '/tasks/' + id + '.json').pipe(catchError(error => {\n      const errObject = {\n        statusCode: error.status,\n        errorMessage: error.message,\n        dateTime: new Date()\n      };\n      this.loggingService.logError(errObject);\n      return throwError(() => error);\n    })).subscribe({\n      next: res => {\n        console.log('Delete Successfully:', res);\n      },\n      error: err => {\n        this.errorSubject.next(err);\n        console.error('Error occurred:', err);\n      }\n    });\n  }\n  deleteAllTask() {\n    this.http.delete(this.getApi() + '/tasks.json', {\n      observe: 'events',\n      responseType: 'arraybuffer'\n    }).pipe(tap(event => {\n      console.log(event);\n      if (event.type === HttpEventType.DownloadProgress) {}\n    }), catchError(error => {\n      const errObject = {\n        statusCode: error.status,\n        errorMessage: error.message,\n        dateTime: new Date()\n      };\n      this.loggingService.logError(errObject);\n      return throwError(() => error);\n    })).subscribe({\n      next: res => {\n        console.log('Delete all task Successfully:', res);\n      },\n      error: err => {\n        console.error('Error occurred:', err);\n        this.errorSubject.next(err);\n      }\n    });\n  }\n  updateTask(id, data) {\n    this.http.put(this.getApi() + '/tasks/' + id + '.json', data).pipe(catchError(error => {\n      const errObject = {\n        statusCode: error.status,\n        errorMessage: error.message,\n        dateTime: new Date()\n      };\n      this.loggingService.logError(errObject);\n      return throwError(() => error);\n    })).subscribe({\n      next: value => {\n        console.log('update successfully', value);\n      },\n      error: err => {\n        console.log('unable to update data', err);\n        this.errorSubject.next(err);\n      }\n    });\n  }\n  getTaskById(id) {\n    return this.http.get(this.getApi() + '/tasks/' + id + '.json').pipe(map(response => {\n      let task = {};\n      task = {\n        ...response,\n        id: id\n      };\n      return task;\n    }));\n  }\n  static #_2 = this.ɵfac = function TaskService_Factory(t) {\n    return new (t || TaskService)();\n  };\n  static #_3 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TaskService,\n    factory: TaskService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["inject","HttpClient","HttpEventType","HttpHeaders","HttpParams","catchError","map","Subject","tap","throwError","LoggingService","TaskService","_","API","constructor","http","loggingService","errorSubject","getApi","createTask","data","post","headers","pipe","error","errObject","statusCode","status","errorMessage","message","dateTime","Date","logError","subscribe","next","res","console","log","err","fetchAllTask","set","queryParams","get","params","observe","response","tasks","key","hasOwnProperty","push","id","deleteTaskById","delete","deleteAllTask","responseType","event","type","DownloadProgress","updateTask","put","value","getTaskById","task","_2","_3","factory","ɵfac","providedIn"],"sources":["D:\\angular practise\\Practise\\angular-http-client\\src\\app\\Service\\task.service.ts"],"sourcesContent":["import {inject, Injectable} from '@angular/core';\nimport {HttpClient, HttpErrorResponse, HttpEventType, HttpHeaders, HttpParams} from \"@angular/common/http\";\nimport {catchError, map, Subject, tap, throwError} from \"rxjs\";\nimport {Task} from \"../Model/task\";\nimport {LoggingService} from \"./logging.service\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TaskService {\n\n    static API = 'https://task-management-def88-default-rtdb.firebaseio.com/';\n\n    http = inject(HttpClient);\n    loggingService = inject(LoggingService);\n\n    errorSubject = new Subject<HttpErrorResponse>();\n\n    constructor() {\n    }\n\n\n    protected getApi(): string {\n        return TaskService.API;\n    }\n\n    createTask(data: Task) {\n        this.http.post<{ name: string }>(\n            this.getApi() + '/tasks.json',\n            data,\n            {headers: {'task-create': 'created'}}\n        )\n            .pipe(catchError((error) => {\n                const errObject =\n                    {statusCode: error.status, errorMessage: error.message, dateTime: new Date()};\n                this.loggingService.logError(errObject);\n                return throwError(() => error);\n            }))\n            .subscribe({\n                next: (res) => {\n                    console.log('Task created:', res);\n                },\n                error: (err: any) => {\n                    console.error('Error occurred:', err);\n                    this.errorSubject.next(err);\n                }\n            });\n    }\n\n\n    fetchAllTask() {\n        let headers = new HttpHeaders();\n        headers = headers.set('content-type', 'application/json');\n        headers = headers.set('content-type', 'text/html');\n        headers = headers.set('Access-Control-Allow-Origin', '*');\n\n        let queryParams = new HttpParams();\n        queryParams = queryParams.set('page', 2);\n        queryParams = queryParams.set('items', 20);\n\n        return this.http.get<{ [key: string]: Task }>(\n            this.getApi() + '/tasks.json',\n            {headers: headers, params: queryParams, observe: 'body'})\n            .pipe(\n                map((response) => {\n                    console.log(response);\n                    // Transform data\n                    let tasks = [];\n                    for (let key in response) {\n                        if (response.hasOwnProperty(key)) {\n                            tasks.push({...response[key], id: key});\n                        }\n                    }\n                    return tasks;\n                }), catchError((error) => {\n                    const errObject =\n                        {statusCode: error.status, errorMessage: error.message, dateTime: new Date()};\n                    this.loggingService.logError(errObject);\n                    return throwError(() => error);\n                }))\n    }\n\n    deleteTaskById(id: string) {\n        this.http.delete(this.getApi() + '/tasks/' + id + '.json')\n            .pipe(catchError((error) => {\n                const errObject =\n                    {statusCode: error.status, errorMessage: error.message, dateTime: new Date()};\n                this.loggingService.logError(errObject);\n                return throwError(() => error);\n            }))\n            .subscribe({\n                next: (res) => {\n                    console.log('Delete Successfully:', res);\n                },\n                error: (err: any) => {\n                    this.errorSubject.next(err);\n                    console.error('Error occurred:', err);\n                }\n            });\n    }\n\n    deleteAllTask() {\n        this.http.delete(this.getApi() + '/tasks.json',{observe: 'events', responseType: 'arraybuffer'})\n            .pipe(tap((event) => {\n                console.log(event);\n                if (event.type === HttpEventType.DownloadProgress) {\n                    \n                }\n            }), catchError((error) => {\n                const errObject =\n                    {statusCode: error.status, errorMessage: error.message, dateTime: new Date()};\n                this.loggingService.logError(errObject);\n                return throwError(() => error);\n            }))\n            .subscribe({\n                next: (res) => {\n                    console.log('Delete all task Successfully:', res);\n                },\n                error: (err: any) => {\n                    console.error('Error occurred:', err);\n                    this.errorSubject.next(err);\n                }\n            });\n    }\n\n    updateTask(id: string, data: Task) {\n        this.http.put(this.getApi() + '/tasks/' + id + '.json', data)\n            .pipe(catchError((error) => {\n                const errObject =\n                    {statusCode: error.status, errorMessage: error.message, dateTime: new Date()};\n                this.loggingService.logError(errObject);\n                return throwError(() => error);\n            }))\n            .subscribe({\n                next: value => {\n                    console.log('update successfully', value);\n                },\n                error: err => {\n                    console.log('unable to update data', err);\n                    this.errorSubject.next(err);\n                }\n            });\n    }\n\n    getTaskById(id: string) {\n        return this.http.get(this.getApi() + '/tasks/' + id + '.json')\n            .pipe(map((response) => {\n                let task = {};\n                task = {...response, id: id};\n                return task;\n            }));\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}